#!/bin/env bash
# git switch
gsw() {
  if [[ -n $1 ]]; then
    git switch "$1"
  else
    git branch | fzf | xargs -I_ git switch _
  fi
}

# git switch remote
gswr() {
  git branch -a | fzf | awk -F "/" '{print $NF}' | xargs -I_ git switch _
}

# git pull
gp() {
  if [[ $# -eq 0 ]]; then
    git pull --all -p
  else
    git branch | fzf | awk '{ print $2 }' | xargs -I_ git pull origin _ -p
  fi
}

# git push
gpsh() {
  local selected_branch=$(git branch | fzf | sed 's/^[* ]*//')
  git push origin "$selected_branch"
}

gpshc() {
  local selected_branch=$(git branch --show-current)
  git push origin "$selected_branch"
}

function gda() {
  local files=($(git status --porcelain=v1 | awk '{print $2}'))
  if [ ${#files[@]} -eq 0 ]; then
    echo "No files in working tree, staged, or untracked."
    return
  fi

  local selected_files=($(
    printf "%s\n" "${files[@]}" | fzf -m \
      --preview "if git diff --name-only --cached | grep -q {} ; then \
                git diff --cached {} | diff-so-fancy; \
            elif git ls-files --others --exclude-standard | grep -q {} ; then \
                cat {} | diff-so-fancy; \
            else \
                git diff {} | diff-so-fancy; fi" \
      --height 100% \
      --preview-window right:80% \
      --border \
      --prompt="Select files: "
  ))

  if [ ${#selected_files[@]} -eq 0 ]; then
    echo "No files selected."
    return
  fi

  git add "${selected_files[@]}"
}

# updateAll() {
#   sudo apt update;
#   sudo apt upgrade -y;
#   sudo apt dist-upgrade -y;
#   sudo apt full-upgrade -y;
#   sudo apt autoremove -y;
#   sudo apt autoclean -y;
#   zimup;
# }

function cdd() {
  cd "$(ls -d -- */ | fzf --preview 'ls -a {}')" || echo "Invalid directory"
}

go_to_job() {
  local proyect=$(ls ~/Code/job/ | fzf)
  cd ~/Code/job/"$proyect" || exit
}

go_to_dev() {
  local proyect=$(ls ~/Code/dev/ | fzf)
  cd ~/Code/dev/"$proyect" || exit
}

# open the proyect work in code and terminal
open_job() {
  local poryectName=$(ls ~/Code/job | fzf)
  cd "$HOME/Code/job/$poryectName" || exit
  code "$HOME/Code/job/$poryectName"
}

# open the proyect work in code and terminal
open_dev() {
  local poryectNameDev=$(ls ~/Code/dev | fzf)
  cd "$HOME/Code/dev/$poryectNameDev" || exit
  code "$HOME/Code/dev/$poryectNameDev"
}

job() {
  open --new -a "Google Chrome" --args "https://app.slack.com/client/TA12BB21H/CA15C9LKU"
  open --new -a "Google Chrome" --args "https://app.clickup.com/"
  open --new -a "Google Chrome" --args "https://mail.google.com/mail/u/2/#all"

  open_job
}

# exec docker container
dexec() {
  # List all running containers and let the user select one
  local container=$(docker ps --format '{{.Names}}' | fzf)

  # If a container was selected, exec into it
  if [[ -n "$container" ]]; then
    docker exec -it "$container" "${1:-bash}"
  else
    echo "No container selected."
  fi
}

# run docker container
drun() {
  # List all stopped containers and let the user select one
  local container=$(docker ps -a --filter 'status=exited' --format '{{.Names}}' | fzf)

  # If a container was selected, start it
  if [[ -n "$container" ]]; then
    docker start "$container"
  else
    echo "No container selected."
  fi
}

# stop docker container
dstop() {
  # List all running containers and let the user select one
  local container=$(docker ps --format '{{.Names}}' | fzf)

  # If a container was selected, stop it
  if [[ -n "$container" ]]; then
    docker stop "$container"
  else
    echo "No container selected."
  fi
}

dcup() {
  local container_status="exited" # change this to the status you want to filter by
  local containers=$(docker-compose ls -a | grep $container_status | fzf -m)

  if [[ -n "$containers" ]]; then
    echo "$containers" | awk '{print $3}' | xargs -I_ docker-compose -f _ up -d
  else
    echo "No container selected."
  fi
}

dcstop() {
  local containers=$(docker-compose ls | fzf -m)

  if [[ -n "$containers" ]]; then
    echo "$containers" | awk '{print $3}' | xargs -I_ docker-compose -f _ stop
  else
    echo "No container selected."
  fi
}

# # clone github repo
# clone_git_repo() {
#   local -r repo_url=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/user/repos?per_page=200" | jq --raw-output ".[].name" | fzf)
#   git clone "git@github.com:rsbmk/$repo_url.git"
#   echo "$repo_url"
# }

# # clone gitlab repo
# clone_gitlab_repo() {
#   local -r repo_url=$(curl -s -H "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.com/api/v4/users/robertobocio/starred_projects" | jq --raw-output '.[].path' | fzf)
#   git clone "git@gitlab.com:devlab-ec/$repo_url.git"
#   echo "$repo_url"
# }
