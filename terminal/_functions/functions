#!/bin/env bash
# git switch
gsw() {
  if [[ -n $1 ]]; then
    git switch "$1"
  else
    git branch | fzf | xargs -I_ git switch _
  fi
}

# git switch remote
gswr() {
  git branch -a | grep "remotes/origin/" | fzf | sed 's|remotes/origin/||' | xargs -I_ git switch _
}

# git pull
gp() {
  if [[ $# -eq 0 ]]; then
    git pull --all -p
  else
    git branch | fzf | awk '{ print $2 }' | xargs -I_ git pull origin _ -p
  fi
}

# git push
gpsh() {
  local selected_branch=$(git branch | fzf | sed 's/^[* ]*//')
  git push origin "$selected_branch"
}

gpshc() {
  local selected_branch=$(git branch --show-current)
  git push origin "$selected_branch"
}

gda() {
  local files=($(git status --porcelain=v1 | awk '{print $2}'))
  if [ ${#files[@]} -eq 0 ]; then
    echo "No files in working tree, staged, or untracked."
    return
  fi

  local selected_files=($(
    printf "%s\n" "${files[@]}" | fzf -m \
      --preview "if git diff --name-only --cached | grep -q {} ; then \
                git diff --cached {} | diff-so-fancy; \
            elif git ls-files --others --exclude-standard | grep -q {} ; then \
                cat {} | diff-so-fancy; \
            else \
                git diff {} | diff-so-fancy; fi" \
      --height 100% \
      --preview-window right:80% \
      --border \
      --prompt="Select files: "
  ))

  if [ ${#selected_files[@]} -eq 0 ]; then
    echo "No files selected."
    return
  fi

  git add "${selected_files[@]}"
}

cdd() {
  cd "$(ls -d -- */ | fzf --preview 'ls -a {}')" || echo "Invalid directory"
}

mc() {
  local proyect=$(ls ~/Code/mc/ | fzf)
  cd ~/Code/mc/"$proyect" || exit
}

inl() {
  local proyect=$(ls ~/Code/inl/ | fzf)
  cd ~/Code/inl/"$proyect" || exit
}

dev() {
  local proyect=$(ls ~/Code/dev/ | fzf)
  cd ~/Code/dev/"$proyect" || exit
}

ph() {
  local proyect=$(ls ~/Code/ph/ | fzf)
  cd ~/Code/ph/"$proyect" || exit
}

# exec docker container
dexec() {
  # List all running containers and let the user select one
  local container=$(docker ps --format '{{.Names}}' | fzf)

  # If a container was selected, exec into it
  if [[ -n "$container" ]]; then
    docker exec -it "$container" "${1:-bash}"
  else
    echo "No container selected."
  fi
}

# run docker container
drun() {
  # List all stopped containers and let the user select one
  local container=$(docker ps -a --filter 'status=exited' --format '{{.Names}}' | fzf)

  # If a container was selected, start it
  if [[ -n "$container" ]]; then
    docker start "$container"
  else
    echo "No container selected."
  fi
}

# stop docker container
dstop() {
  # List all running containers and let the user select one
  local container=$(docker ps --format '{{.Names}}' | fzf)

  # If a container was selected, stop it
  if [[ -n "$container" ]]; then
    docker stop "$container"
  else
    echo "No container selected."
  fi
}

dcup() {
  local container_status="exited" # change this to the status you want to filter by
  local containers=$(docker-compose ls -a | grep $container_status | fzf -m)

  if [[ -n "$containers" ]]; then
    echo "$containers" | awk '{print $3}' | xargs -I_ docker-compose -f _ up -d
  else
    echo "No container selected."
  fi
}

dcstop() {
  local containers=$(docker-compose ls | fzf -m)

  if [[ -n "$containers" ]]; then
    echo "$containers" | awk '{print $3}' | xargs -I_ docker-compose -f _ stop
  else
    echo "No container selected."
  fi
}

# docker-compose up with file selection
dcu() {
  # Find all docker-compose files in current directory
  local compose_files=($(find . -maxdepth 1 -name "*compose*.yml" -o -name "*compose*.yaml" -o -name "docker-compose.yml" -o -name "docker-compose.yaml" | sort))
  
  if [ ${#compose_files[@]} -eq 0 ]; then
    echo "No docker-compose files found in current directory."
    return 1
  elif [ ${#compose_files[@]} -eq 1 ]; then
    echo "Using: ${compose_files}"
    docker-compose -f "${compose_files}" up -d
  else
    echo "Multiple docker-compose files found:"
    local selected_file=$(printf "%s\n" "${compose_files[@]}" | fzf --prompt="Select docker-compose file: ")
    
    if [[ -n "$selected_file" ]]; then
      echo "Using: $selected_file"
      docker-compose -f "$selected_file" up -d
    else
      echo "No file selected."
    fi
  fi
}

# delete multiple git branches
gbd() {
  local selected_branches=($(
    git branch | 
    grep -v '\*' | 
    fzf -m --height 40% --reverse --border \
        --prompt="Select branches to delete: "
  ))

  if [ ${#selected_branches[@]} -eq 0 ]; then
    echo "No branches selected."
    return
  fi

  echo "The following branches will be deleted:"
  printf "  %s\n" "${selected_branches[@]}"
  echo -n "Are you sure you want to delete these branches? [y/N] "
  read -r confirm
  
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    for branch in "${selected_branches[@]}"; do
      git branch -D "$(echo "$branch" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
    done
    echo "Selected branches deleted successfully."
  else
    echo "Operation cancelled."
  fi
}